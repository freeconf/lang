package lang

import (
	"github.com/freeconf/lang/pb"
	"github.com/freeconf/yang/meta"
	"github.com/freeconf/yang/val"
)

// MetaEncoder takes a meta.Module and serializes it into protobuf objects
// to they can be transfered into each language and decoded on the other end.
// 
// Workflow typically involved changing the proto file then the generated Go
// file from the template will not compile if there is something to add.  There 
// would also likely be files in each language that decodes that would need
// updates as well.  Simple fields to proto files generally do not require 
// changes to this template but do require the template be exercised.
type MetaEncoder struct {
    recursive map[meta.HasDataDefinitions]struct{}
}

func NewMetaEncoder() *MetaEncoder {
    return &MetaEncoder{
        recursive: make(map[meta.HasDataDefinitions]struct{}),
    }
}

func (e *MetaEncoder) encodeRpcList(parent any, from map[string]*meta.Rpc) []*pb.Rpc {
    to := make([]*pb.Rpc, len(from))    
    i := 0
    for _, x := range from {
        to[i] = e.encodeRpc(parent, x)
        i++
    }
    return to
}

func (e *MetaEncoder) encodeNotificationList(parent any, from map[string]*meta.Notification) []*pb.Notification {
    to := make([]*pb.Notification, len(from))    
    i := 0
    for _, x := range from {
        to[i] = e.encodeNotification(parent, x)
        i++
    }
    return to
}

func (e *MetaEncoder) encodeFormat(parent *pb.Type, from val.Format) pb.Format {
    return pb.Format(from)
}

func (e *MetaEncoder) encodeOptionalBool(value bool, specified bool) pb.OptionalBool {
    if !specified {
        return pb.OptionalBool_NOT_SPECIFIED
    }
    if value {
        return pb.OptionalBool_TRUE
    }
    return pb.OptionalBool_FALSE
}

func (e *MetaEncoder) encodeRevisionList(parent any, from []*meta.Revision) []*pb.Revision {
    to := make([]*pb.Revision, len(from))    
    for i, x := range from {
        to[i] = e.encodeRevision(parent, x)
    }
    return to
}

func (e *MetaEncoder) encodeIdentityList(parent any, from map[string]*meta.Identity) []*pb.Identity {
    to := make([]*pb.Identity, len(from))
    i := 0
    for _, x := range from {
        to[i] = e.encodeIdentity(parent, x)
        i++
    }
    return to
}

func (e *MetaEncoder) encodeFeatureList(parent any, from map[string]*meta.Feature) []*pb.Feature {
    to := make([]*pb.Feature, len(from))    
    i := 0
    for _, x := range from {
        to[i] = e.encodeFeature(parent, x)
        i++
    }
    return to
}

func (e *MetaEncoder) encodeExtensionList(parent any, from []*meta.Extension) []*pb.Extension {
    to := make([]*pb.Extension, len(from))    
    for i, x := range from {
        to[i] = e.encodeExtension(parent, x)
    }
    return to
}

func (e *MetaEncoder) encodeChoiceCaseList(parent any, from map[string]*meta.ChoiceCase) []*pb.ChoiceCase {
    to := make([]*pb.ChoiceCase, len(from))
    i := 0
    for _, x := range from {
        to[i] = e.encodeChoiceCase(parent, x)
        i++
    }
    return to
}

func (e *MetaEncoder) encodeDataDefList(parent any, from []meta.Definition) []*pb.DataDef {
    to := make([]*pb.DataDef, len(from))
    for i, d := range from {

        if r, ok := d.(meta.HasDataDefinitions); ok {
            if _, isRecursive := e.recursive[r]; isRecursive {
                path := meta.SchemaPathNoModule(r)
                to[i] = &pb.DataDef{DefOneof:&pb.DataDef_Ptr{Ptr: &pb.MetaPointer{Path: path}}}
                continue
            } else {
                e.recursive[r] = struct{}{}
            }
        }

        switch x := d.(type) {
{{- range .MetaDefs}}
{{- if .IsDataDef }}
            case *meta.{{.Name}}:
                to[i] = &pb.DataDef{DefOneof:&pb.DataDef_{{.Name}}{ {{.Name}}:e.encode{{.Name}}(parent, x)}}
{{- end }}
{{- end }}        
        }
    }
    return to
}

func (e *MetaEncoder) encodeExtensionDefArgList(parent *pb.ExtensionDef, from []*meta.ExtensionDefArg) []*pb.ExtensionDefArg {
    to := make([]*pb.ExtensionDefArg, len(from))    
    for i, f := range from {
        to[i] = e.encodeExtensionDefArg(parent, f)
    }
    return to
}

func (e *MetaEncoder) encodeStatus(parent interface{}, from meta.Status) pb.Status {
    return pb.Status(from)
}

func (e *MetaEncoder) encodeEnumList(parent *pb.Type, from []*meta.Enum) []*pb.Enum {
    if len(from) == 0 {
        return nil
    }
    to := make([]*pb.Enum, len(from))    
    for i, f := range from {
        to[i] = e.encodeEnum(parent, f)
    }
    return to    
}

func (e *MetaEncoder) encodeIfFeatureList(parent any, from []*meta.IfFeature) []*pb.IfFeature {
    if len(from) == 0 {
        return nil
    }
    to := make([]*pb.IfFeature, len(from))    
    for i, f := range from {
        to[i] = e.encodeIfFeature(parent, f)
    }
    return to    
}

func (e *MetaEncoder) encodeMustList(parent any, from []*meta.Must) []*pb.Must {
    if len(from) == 0 {
        return nil
    }
    to := make([]*pb.Must, len(from))    
    for i, f := range from {
        to[i] = e.encodeMust(parent, f)
    }
    return to    
}

{{ range .MetaDefs}}
{{ if .IsMetaDef }}
func (e *MetaEncoder) encode{{.Name}}(parent any, from *meta.{{.Name}}) *pb.{{.Name}} {
    if from == nil {
        return nil
    }
    var def pb.{{.Name}}
    {{- range .Fields}}
        {{- if eq .Type "OptionalBool" }}
        def.{{.GoName}} = e.encodeOptionalBool(from.{{.GoName}}(), from.Is{{.GoName}}Set())
        {{- else if eq .Type "DataDef" }}
        def.{{.GoName}} = e.encodeDataDefList(&def, from.DataDefinitions())        
        {{- else if eq .GoName "Definition" }}
        def.{{.GoName}} = from.Definition().Ident()
        {{- else if .CustomEncoder }}
        def.{{.GoName}} = e.encode{{.CustomEncoder}}(&def, from.{{.GoName}}())
        {{- else if eq .GoName "Key" }}
        def.Key = e.encodeListKeys(from)
        {{- else if eq .GoName "Value" }}
        def.Value = int32(from.Value())
        {{- else if eq .GoName "DefaultVal" }}
        if from.HasDefault() {
            def.{{.GoName}} = from.Default()
        }
        {{- else if eq .GoName "DefaultVals" }}
        if from.HasDefault() {
            def.{{.GoName}} = from.Default()
        }
        {{- else }}
        def.{{.GoName}} = from.{{.GoName}}()
        {{- end }}
    {{- end }}
    return &def
}
{{- end }}
{{- end }}

func (e *MetaEncoder) encodeListKeys(l *meta.List) []string {
    idents := make([]string, len(l.KeyMeta()))
    for i, k := range l.KeyMeta() {
        idents[i] = k.Ident()
    }
    return idents
}

func (e *MetaEncoder) Encode(from *meta.Module) *pb.Module {
    return e.encodeModule(nil, from)
}
