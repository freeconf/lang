#ifndef FREECONF_H
#define FREECONF_H

#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

typedef enum fc_encoding_id
{
{{- range .Meta.Definitions }}
  FC_{{ .Name | snake| uc -}} = {{ .EncodingId }},
{{- end }}
} fc_encoding_id;

typedef enum fc_optional_bool
{
  FC_BOOL_NOT_SET,
  FC_BOOL_TRUE,
  FC_BOOL_FALSE
} fc_optional_bool;

typedef struct fc_meta fc_meta;
typedef struct fc_meta_array fc_meta_array;
typedef struct fc_extension_array fc_extension_array;

struct fc_extension_array {
    struct fc_extension** extensions;
    size_t length;
};

// Casting things as fc_meta only works because the first several fields
// all align.  Poorman interface in C.
struct fc_meta {
    fc_meta* parent;
    fc_encoding_id encoding_id;
    fc_extension_array extensions;
};

extern char* fc_meta_ident(fc_meta *meta);
extern fc_meta* fc_find_meta(fc_meta* meta, char* ident);
extern fc_meta_array* fc_definitions(fc_meta *meta);

struct fc_meta_array {
  fc_meta** metas;
  size_t length;
};

{{ range .Meta.Definitions}}
typedef struct {{. | cDefType }} {
    fc_meta* parent;
{{- range .Fields }}
    {{. | cFieldType}} {{. | cName}};
{{- end }}
} {{. | cDefType }};
{{ end}}

typedef struct fc_encoded_module {
	long pool_id;
	void* serialized;
	int   serialized_len;
} fc_encoded_module;

typedef struct fc_node_error {
    char message[128];
} fc_node_error;


typedef enum fc_error {
    FC_ERR_NONE,
    FC_BAD_ENCODING,
    FC_EMPTY_BUFFER,
    FC_UNEXPECTED_ENCODING,
    FC_NOT_IMPLEMENTED,
} fc_error;

fc_error fc_decode_module(fc_module **m, void* buffer, int len);

typedef enum fc_val_type {
    FC_VAL_STRING,
    FC_VAL_INT32,
    // ...
} fc_val_type;

typedef struct fc_val {
    fc_val_type type;
    void* data;
    size_t size;
} fc_val;

typedef struct fc_path {
    struct fc_path* parent;
    fc_meta* meta;
} fc_path;

struct fc_path* fc_new_path(struct fc_path* parent, fc_meta* meta);

typedef struct fc_field_request {
    void* context;
	struct fc_selection* selection;
    fc_meta* meta;
    bool write;
} fc_field_request;

typedef struct fc_child_request {
    void* context;
	struct fc_selection* selection;
    fc_meta* meta;
} fc_child_request;

typedef struct fc_node fc_node;

struct fc_node {
    long pool_id;
    void* context;
    fc_node_error* (*on_field)(void* context, fc_field_request r, fc_val** val);
    fc_node_error* (*on_child)(void* context, fc_child_request r, fc_node** child);
};

fc_node_error* fc_node_on_child_x(fc_node* node, void* context, fc_child_request r, fc_node** child);

typedef struct fc_browser {
    fc_module* module;
    struct fc_node* node;
} fc_browser;

typedef struct fc_selection {
    fc_path* path;
    fc_node* node;
    long pool_id;
} fc_selection;


#endif