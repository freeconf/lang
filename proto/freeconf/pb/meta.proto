syntax="proto3";
option go_package = "./pb";
package pb;
import "freeconf/pb/val.proto";

enum OptionalBool {
      NOT_SPECIFIED = 0;
      TRUE = 1;
      FALSE = 2;
}

enum Status {
      CURRENT = 0;
      DEPRECATED = 1;
      OBSOLETE = 2;
}

enum OrderedBy {
      SYSTEM = 0;
      USER = 1;
}

message OptionalInt {
      bool valid = 1;
      int32 i = 2;
}

message Module {
      string ident = 1;
      string namespace = 2;
      string prefix = 3;
      string description = 4;
      string contact = 5;
      string organization = 6;
      string reference = 7;
      string version = 8;
      repeated Revision revisions = 9;
      repeated DataDef definitions = 10;
      repeated Notification notifications = 11;
      repeated Rpc actions = 12;
      repeated Identity identities = 13;
      repeated Feature features = 14;
      repeated Extension extensions = 16;
      repeated ExtensionDef extensionDefs = 17;
}

message RpcInput {
      string reference = 1;
      repeated DataDef definitions = 3;
      repeated IfFeature ifFeatures = 20;
      repeated Must musts = 21;
      repeated Extension extensions = 22;
}

message RpcOutput {
      string reference = 1;
      repeated DataDef definitions = 3;
      repeated IfFeature ifFeatures = 20;
      repeated Must musts = 21;
      repeated Extension extensions = 22;
}

message Rpc {
      string ident = 1;
      string description = 2;
      string reference = 4;
      RpcInput input = 5;
      RpcOutput output = 6;
      Status status = 19;
      repeated IfFeature ifFeatures = 20;
      repeated Extension extensions = 22;
}

message Notification {
      string ident = 1;
      string description = 2;
      string reference = 4;
      repeated DataDef definitions = 5;
      Status status = 19;
      repeated IfFeature ifFeatures = 20;
      repeated Extension extensions = 22;
}

message ExtensionDefArg {
    string ident = 1;
    string description = 2;
    string reference = 3;
    bool yinElement = 5;
}

message ExtensionDef {
    string ident = 1;
    string description = 2;
    string reference = 3;
    Status status = 4;
    repeated ExtensionDefArg arguments = 5;
}

message Extension {
      string ident = 1;
      string prefix = 2;
      string keyword = 3;
      string definition = 4;
      repeated string arguments = 5;
}

message IfFeature {
      string expression = 1;
      repeated Extension extensions = 2;
}

message Must {
      string expression = 1;
      string description = 2;
      string reference = 3;
      string errorMessage = 4;
      string errorAppTag = 5;
      repeated Extension extensions = 6;
}

message When {
      string expression = 1;
      string description = 2;
      string reference = 3;
      repeated Extension extensions = 4;
}

message Container {
      string ident = 1;
      string description = 2;
      string reference = 3;
      string presence = 4;
      repeated DataDef definitions = 7;
      OptionalBool config = 14;
      OptionalBool mandatory = 15;
      repeated Rpc actions = 16;
      repeated Notification notifications = 17;
      When when = 18;
      Status status = 19;
      repeated IfFeature ifFeatures = 20;
      repeated Must musts = 21;
      repeated Extension extensions = 22;
}

message Enum {
      string ident = 1;
      string description = 2;
      string reference = 3;
      int32 value = 4;
      repeated Extension extensions = 5;
}

message Bit {
      string ident = 1;
      string description = 2;
      string reference = 3;
      int32 position = 4;
}

message RangeNumber {
      string str = 1;
      bool isMax = 2;
      bool isMin = 3;
      int64 integer = 4;
      bool integerSet = 5;
      uint64 unsigned = 6;
      bool unsignedSet = 7;
      double float = 8;
      bool floatSet = 9;
}

message RangeEntry {
      RangeNumber min = 1;
      RangeNumber max = 2;
      RangeNumber exact = 3;
}

message Range {
      string description = 2;
      string reference = 3;
      string errorMessage = 4;
      string errorAppTag = 5;
      repeated Extension extensions = 6;     
}

message Pattern {
      string description = 2;
      string reference = 3;
      string pattern = 4;
      string errorMessage = 5;
      string errorAppTag = 6;
      bool inverted = 7;
      repeated Extension extensions = 8;     
}

message Type {
      string ident = 1;
      string description = 2;
      string reference = 3;
      Format format = 4;
      repeated Enum enums = 5;
      repeated Bit bits = 6;
      repeated Range range = 7;
      repeated Range length = 8;
      repeated Pattern patterns = 9;
      string path = 10;
      int32 fractionDigits = 11;
      repeated string base = 13;
      bool requireInstance = 15;
      repeated Type union = 16;
      repeated Extension extensions = 20;
}

message Leaf {
      string ident = 1;
      string description = 2;
      string reference = 3;
      Type type = 5;
      OptionalBool config = 14;
      OptionalBool mandatory = 15;
      string defaultVal = 16;
      string units = 17;
      When when = 18;
      Status status = 19;
      repeated IfFeature ifFeatures = 20;
      repeated Must musts = 21;
      repeated Extension extensions = 22;
}

message LeafList {
      string ident = 1;
      string description = 2;
      string reference = 3;
      Type type = 5;
      OptionalBool config = 14;
      OptionalBool mandatory = 15;
      repeated string defaultVals = 16;
      string units = 17;
      When when = 18;
      Status status = 19;
      repeated IfFeature ifFeatures = 20;
      repeated Must musts = 21;
      repeated Extension extensions = 22;
}

message Unique {
      repeated string leafs = 1;
}

message List {
      string ident = 1;
      string description = 2;
      string reference = 3;
      repeated DataDef definitions = 7;
      repeated Notification notifications = 12;
      repeated string key = 13;
      OptionalBool config = 14;
      OptionalBool mandatory = 15;
      repeated Rpc actions = 17;
      When when = 18;
      Status status = 19;
      repeated IfFeature ifFeatures = 20;
      repeated Must musts = 21;
      repeated Extension extensions = 22;
      repeated Unique unique = 23;
      OrderedBy orderedBy = 24;
      OptionalInt minElements = 25;
      OptionalInt maxElements = 26;
      OptionalBool unbounded = 27;
}


message MetaPointer {
      string path = 1;
}

message DataDef {
      oneof def_oneof {
           Container container = 1;
           Leaf leaf = 2;
           LeafList leafList = 3;
           List list = 4;
           Choice choice = 5;
           Any any = 6;
           MetaPointer ptr = 7;
      }
}

message Any {
      string ident = 1;
      string description = 2;
      string reference = 3;
      OptionalBool config = 14;
      OptionalBool mandatory = 15;  
      When when = 18;
      Status status = 19;
      repeated IfFeature ifFeatures = 20;
      repeated Must musts = 21;
      repeated Extension extensions = 22;
}

message Identity {
      string ident = 1;
      string description = 2;
      string reference = 3;
      Status status = 4;
      repeated string baseIds = 5;
      // derived
      // ifs
      repeated Extension extensions = 7;
}

message Feature {
      string ident = 1;
      string description = 2;
      string reference = 3;
      Status status = 4;
      // ifs
      repeated Extension extensions = 7;
}

message Revision {
      string ident = 1;
      string description = 2;
      string reference = 3;
      repeated Extension extensions = 7;
}

message Choice {
      string ident = 1;
      string description = 2;
      string reference = 3;
      OptionalBool config = 14;
      OptionalBool mandatory = 15;
      string defaultVal = 16;
      repeated ChoiceCase cases = 9;

      When when = 18;
      Status status = 19;
      repeated IfFeature ifFeatures = 20;
      repeated Extension extensions = 22;
}

message ChoiceCase {
      string ident = 1;
      string description = 2;
      string reference = 3;
      repeated DataDef definitions = 7;
      When when = 18;
      Status status = 19;
      repeated IfFeature ifFeatures = 20;
      repeated Extension extensions = 22;

      // ifs
}
