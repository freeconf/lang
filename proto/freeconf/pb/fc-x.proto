syntax="proto3";
option go_package = "./pb";
package pb;
import "freeconf/pb/val.proto";
import "freeconf/pb/common.proto";

/*
 This is used when Go calls into whatever language it is talking to which we
 refer to as "X" here. It is predominately around the node API then Go needs
 navigate management APIs in the "X" language.
*/

service XNode {
      rpc XRootSelection(XRootSelectionRequest) returns (XRootSelectionResponse) {}
      rpc XNodeSource(XNodeSourceRequest) returns (XNodeSourceResponse) {}
      rpc XSelect(XSelectRequest) returns (XSelectResponse) {}
      rpc XChild(XChildRequest) returns (XChildResponse) {}
      rpc XField(XFieldRequest) returns (XFieldResponse) {}
      rpc XAction(XActionRequest) returns (XActionResponse) {}
      rpc XNotification(XNotificationRequest) returns (stream XNotificationResponse) {}
      rpc XChoose(XChooseRequest) returns (XChooseResponse) {}
      rpc XNext(XNextRequest) returns (XNextResponse) {}
      rpc XBeginEdit(XBeginEditRequest) returns (XBeginEditResponse) {}
      rpc XEndEdit(XEndEditRequest) returns (XEndEditResponse) {}
      rpc XContext(XContextRequest) returns (XContextResponse) {}
      rpc XRelease(XReleaseRequest) returns (XReleaseResponse) {}
}

message XContextRequest {
      uint64 selHnd = 1;
}

message XContextResponse {}

message XReleaseRequest {
      uint64 selHnd = 1;
}

message XReleaseResponse {}

message XChooseRequest {
      uint64 selHnd = 1;
      string choiceIdent = 2;
}

message XChooseResponse {
      string caseIdent = 1;
}

message XNextRequest {
      uint64 selHnd = 1;
      string metaIdent = 3;
      bool new = 4;
      bool delete = 5;
      int64 row = 6;
      bool first = 7;
      repeated Val key = 8;
}

message XNextResponse {
      uint64 nodeHnd = 1;
      repeated Val key = 2;
}

message XBeginEditRequest {
      uint64 selHnd = 1;
      bool new = 2;
      bool delete = 3;
      bool editRoot = 4;
}

message XBeginEditResponse {}

message XEndEditRequest {
      uint64 selHnd = 1;
      bool new = 2;
      bool delete = 3;
      bool editRoot = 4;
}

message XEndEditResponse {}

message XChildRequest {
      uint64 selHnd = 1;
      string metaIdent = 3;
      bool new = 4;
      bool delete = 5;
}

message XFieldRequest {
      uint64 selHnd = 1;
      string metaIdent = 2;
      bool write = 3;
      bool clear = 4;
      Val toWrite = 5;
}

message XFieldResponse {
      Val fromRead = 1;
}

message XChildResponse {
      uint64 nodeHnd = 1;
}

message XNodeSourceRequest {
      uint64 browserHnd = 1;
}

message XNodeSourceResponse {
      uint64 nodeHnd = 1;
}

message XRootSelectionRequest {
      uint64 browserHnd = 1;
      uint64 selHnd = 2;
}

message XRootSelectionResponse {
      uint64 selHnd = 1;
}

message XSelectRequest {
      uint64 parentSelHnd = 1;
      uint64 nodeHnd = 3;
      uint64 browserHnd = 4;
      PathSegment path = 5; // to be combined with parent's PathSegment to construct full path
}

message XSelectResponse {
      uint64 selHnd = 1;
}

message XActionRequest {
      uint64 selHnd = 1;
      uint64 inputSelHnd = 2;
      string metaIdent = 3;
}

message XActionResponse {
      uint64 outputNodeHnd = 1;
}

message XNotificationRequest {
      uint64 selHnd = 1;
      string metaIdent = 3;
}

message XNotificationResponse {
      uint64 nodeHnd = 1;
      int64 when = 2; // optional nanosecs since epoc, get now() by default
}

message XReleaseHandleRequest {
      uint64 xHnd = 1;
}

message XReleaseHandleResponse {
}

service XHandles {
      rpc ReleaseHandle (XReleaseHandleRequest) returns (XReleaseHandleResponse) {}
}
