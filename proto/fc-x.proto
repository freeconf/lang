syntax="proto3";
option go_package = "./pb";
package pb;

/*
 This is used when Go calls into whatever language it is talking to which we
 refer to as "X" here. It is predominately around the node API then Go needs 
 navigate management APIs in the "X" language.
*/

service XNode {
      rpc XRootSelection(XRootSelectionRequest) returns (XRootSelectionResponse) {}
      rpc XNodeSource(XNodeSourceRequest) returns (XNodeSourceResponse) {}
      rpc XSelect(XSelectRequest) returns (XSelectResponse) {}
      rpc XChild(XChildRequest) returns (XChildResponse) {}
      rpc XField(XFieldRequest) returns (XFieldResponse) {}
      rpc XAction(XActionRequest) returns (XActionResponse) {}
      rpc XNotification(XNotificationRequest) returns (stream XNotificationResponse) {}
}

message XChildRequest {
      uint64 selHnd = 1;
      string metaIdent = 3;
      bool new = 4;
      bool delete = 5;      
}

message XVal {
      oneof value {
            string str = 1;
            int32 i32 = 2;
            int64 i64 = 3;
      }
}

message XFieldRequest {
      uint64 selHnd = 1;
      string metaIdent = 2;
      bool write = 3;
      bool clear = 4;
      XVal toWrite = 5;
}

message XFieldResponse {
      XVal fromRead = 1;
}

message XChildResponse {
      uint64 nodeHnd = 1;
}

message XNodeSourceRequest {
      uint64 browserHnd = 1;
}

message XNodeSourceResponse {
      uint64 nodeHnd = 1;
}

message XRootSelectionRequest {
      uint64 browserHnd = 1;
      uint64 selHnd = 2;
}

message XRootSelectionResponse {
      uint64 selHnd = 1;
}

message XSelectRequest {
      uint64 parentSelHnd = 1;
      uint64 nodeHnd = 3;
      uint64 browserHnd = 4;
      string metaIdent = 5;
}

message XSelectResponse {
      uint64 selHnd = 1;      
}

message XActionRequest {
      uint64 selHnd = 1;
      uint64 inputSelHnd = 2;
      string metaIdent = 3;
}

message XActionResponse {
      uint64 outputNodeHnd = 1;
}

message XNotificationRequest {
      uint64 selHnd = 1;
      string metaIdent = 3;
}

message XNotificationResponse {
      // time
      uint64 nodeHnd = 1;
}

message XReleaseRequest {
      uint64 xHnd = 1;
}

message XReleaseResponse {      
}

service XHandles {
      rpc Release (XReleaseRequest) returns (XReleaseResponse) {}
}
