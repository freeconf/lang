from enum import Enum

# This file is generated from meta.py.in

class Status(Enum):
    CURRENT = 0
    DEPRECATED = 1
    OBSOLETE = 2

{{ range $index, $def := .MetaDefs}}
{{ if $def.IsMetaDef }}
class {{ .Name }}():
    __slots__ = [
        "parent",
{{- if eq $def.Name "Module" }}
        "hnd",
        '__weakref__',
{{- end }}
{{- range $def.Fields }}
        "{{.PyName}}",
{{- end }}
    ]
{{- end }}

    {{- if eq $def.Name "List" }}
    def keyMeta(self):
        keyMeta = []
        for keyName in self.keys:
            keyMeta.append(get_def(self, keyName))
        return keyMeta
    {{- end }}

{{- end }}

class Path():

    def __init__(self, parent, meta, key=None):
        self.parent = parent
        self.meta = meta
        self.key = key

    def str(self):
        s = self.meta.ident
        if self.key != None:
            s = f'{s}({",".join(self.key)})'
        if self.parent:
            return self.parent.str() + '/' + s
        return s


class InvalidPathException(Exception):
    pass


def get_def(meta, ident):
    if not meta:
        raise Exception(f'no meta given to find {ident}')
    for ddef in meta.definitions:
        if ddef.ident == ident:
            return ddef
    raise InvalidPathException(f'definition {ident} not found in {meta.ident}')


def get_rpc(meta, ident):
    if not meta:
        raise Exception(f'no meta given to find {ident}')
    ddef = meta.actions.get(ident, None)
    if ddef:
        return ddef
    raise InvalidPathException(f'rpc {ident} not found in {meta.ident}')


def get_notification(meta, ident):
    if not meta:
        raise Exception(f'no meta given to find {ident}')
    ddef = meta.notifications.get(ident, None)
    if ddef:
        return ddef
    raise InvalidPathException(f'notification {ident} not found in {meta.ident}')
