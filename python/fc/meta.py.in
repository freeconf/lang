from enum import Enum

class Status(Enum):
    CURRENT = 0
    DEPRECATED = 1
    OBSOLETE = 2

{{ $formats := index .Meta.Enums "Format" }}
class Format(Enum):
{{- range  $formats.Entries }}
    {{.Ident}} = {{.Value}}
{{- end }}

{{ range .Meta.Definitions}}
{{ if .IsMetaDef }}
class {{ .Name }}():
    __slots__ = [
        "parent",
{{- if eq .Name "Module" }}
        "hnd",
{{- end }}
{{- range .Fields }}
        "{{.PyName}}",
{{- end }}
    ]
{{- end }}
{{- end }}

class Path():

    def __init__(self, parent, meta):
        self.parent = parent
        self.meta = meta

    def str(self):
        if self.parent:
            return self.parent().str() + '/' + self.meta.ident
        return self.meta.ident

def new_path(module, path_str):
    """Construct a path object from a module and child-ident/grand-child-ident/..."""
    segs = path_str.split('/')
    path = Path(None, module)
    for seg in segs:
        found = get_def(path.meta, seg)
        if not found:
            return None
        path = Path(path, found)
    return path

def get_def(meta, ident):
    if hasattr(meta, 'definitions'):
        for ddef in meta.definitions:
            if ddef.ident == ident:
                return ddef

    if hasattr(meta, 'actions'):
        ddef = meta.actions.get(ident, None)
        if ddef:
            return ddef

    return None

def require_def(meta, ident):
    ddef = get_def(meta, ident)
    if ddef:
        return ddef
    raise Exception(f'definition {ident} not found in {meta.ident}')



