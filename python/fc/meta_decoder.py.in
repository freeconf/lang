import fc.meta
import fc.pb.meta_pb2
import fc.val

# generated file

class Decoder():
    """Convert the protobuf Module to a meta Module """

    def decode_ExtensionDefArgList(self, parent, encoded_list):        
        pass

    def decode_ExtensionList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            x = self.decode_Extension(parent, encoded)
            to[encoded.ident] = x
        return to

    def decode_RevisionList(self, parent, encoded_list):
        to = []
        for encoded in encoded_list:
            x = self.decode_Revision(parent, encoded)
            to.append(x)
        return to

    def decode_IdentityList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            x = self.decode_Identity(parent, encoded)
            to[encoded.ident] = x
        return to

    def decode_FeatureList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            x = self.decode_Feature(parent, encoded)
            to[encoded.ident] = x
        return to

    def decode_RpcList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            rpc = self.decode_Rpc(parent, encoded)
            to[rpc.ident] = rpc
        return to        

    def decode_NotificationList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            notif = self.decode_Notification(parent, encoded)
            to[notif.ident] = notif
        return to

    def decode_ChoiceCaseList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            x = self.decode_ChoiceCase(parent, encoded)
            to[x.ident] = x
        return to

    def decode_Status(self, parent, encoded):
        return fc.meta.Status(encoded)

    def decode_OptionalBool(self, parent, encoded):
        if encoded == fc.pb.meta_pb2.NOT_SPECIFIED:
            return None
        if encoded == fc.pb.meta_pb2.TRUE:
            return True
        return False

    def decode_Format(self, parent, encoded):
        return fc.val.Format(encoded)

    def decode_DataDefList(self, parent, encoded_list):
        to = []
        for encoded in encoded_list:
{{- $conditional := "if" }}
{{- $ddef := index .MessagesByName "DataDef" }}
{{- $fields := index $ddef.OneOfs "def_oneof" }}
{{- range $fields }}
            {{ $conditional }} encoded.HasField('{{.Name}}'):
                to.append(self.decode_{{.Type }}(parent, encoded.{{.Name}}))
    {{- $conditional = "elif" }}    
{{- end }}
            else:
                raise Exception(f'no recognized data definition types {type(encoded)}')

        return to        

{{ range .MetaDefs }}
{{- if .IsMetaDef }}
    def decode_{{.Name}}(self, parent, encoded):
        to = fc.meta.{{.Name}}()
        to.parent = parent
        {{- range .Fields }}
        {{- if .PyCustomDecoder }}
        to.{{.PyName}} = self.decode_{{.PyCustomDecoder}}(to, encoded.{{.PyName}} )
        {{- else }}
        to.{{.PyName}} = encoded.{{.Name}}
        {{- end }}
        {{- end }}
        return to
{{ end }}
{{ end }}

    def decode(self, encoded_module):
        return self.decode_Module(None, encoded_module)
