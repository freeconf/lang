from enum import IntEnum
from freeconf.pb import val_pb2
from pprint import pprint

class Format(IntEnum):
{{- range .ValEnums }}
    {{.Ident}} = {{.Value}}
{{- end }}

class Val():

    def __init__(self, v, format=None, label=None):
        """
        param: format: Go side will coerse values to the required format if it it possible
            so in most cases you can return values that are close enough to the YANG.
        """
        self.v = v
        if label != None:
            self.label = label
        if format == Format.LEAF_REF or format == Format.LEAF_REF_LIST:
            raise Exception("use format of reference type not leafref type")
        if format is None:
            self.format = Val.auto_pick_format(v)
        elif format == 0:
            raise Exception("format UNKNOWN not a legal format")
        else:
            self.format = format

    @classmethod
    def auto_pick_format(cls, v):
        t = type(v)
        if t is list:
            if len(v) > 0:
                return Val.auto_pick_format(v[0]) + 1024
            else: # if empty, doesn't really matter
                return Format.STRING_LIST
        if t is int:
            return Format.INT32
        if t is float:
            return Format.DECIMAL64
        if t is bool:
            return Format.BOOL
        if t is str:
            return Format.STRING
        raise Exception(f"could not auto pick format for {v} with type {type(v)}")

    @classmethod
    def new(cls, v, fc_type):
        py_type = type(v)
        if fc_type.format == Format.ENUM:
            if py_type is int:
                for fc_enum in fc_type.enums:
                    if v == fc_enum.value:
                        return Val(fc_enum.value, format=fc_type.format, label=fc_enum.ident)
                raise Exception(f"could not find valid enum in '{fc_type.ident}' with int value {v}")
            elif py_type is str:
                for fc_enum in fc_type.enums:
                    if v == fc_enum.ident:
                        return Val(fc_enum.value, format=fc_type.format, label=fc_enum.ident)
                raise Exception(f"could not find valid enum in '{fc_type.ident}' with str value {v}")
            else:
                try:
                    # works for IntEnum and possibly other types
                    return Val.new(v.value, fc_type)
                except:
                    pass

                try:
                    return Val.new(str(v), fc_type)
                except:
                    pass
            raise Exception(f"could not map value {v} to string or int for enum '{fc_type.ident}'")

        elif fc_type.format == Format.STRING:
            if py_type != str:
                raise Exception(f"'{py_type}' is not a string")

        # TODO: check basic types
        return Val(v, fc_type.format)


def proto_encode(val):
    if val == None:
        return None
{{- range .ValEnums }}
    if val.format == Format.{{.Ident}}:
  {{- if .IsList }}
        vals = []
        for x_val in val.v:
            vals.append(val_pb2.ValUnion({{.PyNonListIdent}}_val=x_val))
        return val_pb2.Val(format=val_pb2.{{.Ident}}, list_value=vals)
  {{- else if eq .Ident "ENUM"}}
        enum_val = val_pb2.EnumVal(id=val.v, label=val.label)
        return val_pb2.Val(format=val_pb2.{{.Ident}}, value=val_pb2.ValUnion(enum_val=enum_val))
  {{- else }}
        return val_pb2.Val(format=val_pb2.{{.Ident}}, value=val_pb2.ValUnion({{.PyNonListIdent}}_val=val.v))
  {{- end }}
{{- end }}
    raise Exception(f'unimplemented value encoder {val.format}')


def proto_decode(proto_val):
    if proto_val == None:
        return None
{{- range .ValEnums }}
    if proto_val.format == val_pb2.{{.Ident}}:
  {{- if .IsList }}
        vals = []
        for p_val in proto_val.list_value:
            vals.append(p_val.{{.PyNonListIdent}}_val)
        return Val(vals, Format.{{.Ident}})
  {{- else }}
        return Val(proto_val.value.{{.PyNonListIdent}}_val, Format.{{.Ident}})
  {{- end }}
{{- end }}
    raise Exception(f'unimplemented list value decoder {pprint(proto_val)}')
