import freeconf.meta
import freeconf.pb.meta_pb2
import freeconf.val

# generated file

class Decoder():
    """Convert the protobuf Module to a meta Module """

    def __init__(self):
        self.ptrs = []

    def decode_ExtensionDefArgList(self, parent, encoded_list):        
        pass

    def decode_ExtensionList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            x = self.decode_Extension(parent, encoded)
            to[encoded.ident] = x
        return to

    def decode_RevisionList(self, parent, encoded_list):
        to = []
        for encoded in encoded_list:
            x = self.decode_Revision(parent, encoded)
            to.append(x)
        return to

    def decode_IdentityList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            x = self.decode_Identity(parent, encoded)
            to[encoded.ident] = x
        return to

    def decode_FeatureList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            x = self.decode_Feature(parent, encoded)
            to[encoded.ident] = x
        return to

    def decode_RpcList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            rpc = self.decode_Rpc(parent, encoded)
            to[rpc.ident] = rpc
        return to        

    def decode_NotificationList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            notif = self.decode_Notification(parent, encoded)
            to[notif.ident] = notif
        return to

    def decode_EnumList(self, parent, encoded_list):
        to = []
        for encoded in encoded_list:
            e = self.decode_Enum(parent, encoded)
            to.append(e)
        return to


    def decode_IfFeatureList(self, parent, encoded_list):
        to = []
        for encoded in encoded_list:
            e = self.decode_IfFeature(parent, encoded)
            to.append(e)
        return to
    
    def decode_MustList(self, parent, encoded_list):
        to = []
        for encoded in encoded_list:
            e = self.decode_Must(parent, encoded)
            to.append(e)
        return to        

    def decode_ChoiceCaseList(self, parent, encoded_list):
        to = {}
        for encoded in encoded_list:
            x = self.decode_ChoiceCase(parent, encoded)
            to[x.ident] = x
        return to

    def decode_Status(self, parent, encoded):
        return freeconf.meta.Status(encoded)

    def decode_OptionalBool(self, parent, encoded):
        if encoded == freeconf.pb.meta_pb2.NOT_SPECIFIED:
            return None
        if encoded == freeconf.pb.meta_pb2.TRUE:
            return True
        return False

    def decode_MetaPointer(self, parent, encoded):
        ptr = MetaPointer(parent, encoded.path)
        self.ptrs.append(ptr)
        return ptr

    def resolve_ptrs(self, root):
        for ptr in self.ptrs:
            orig = freeconf.meta.Path.find(root, ptr.path)
            if orig == None:
                raise Exception(f"could not find {ptr.path} when resolving recursive nodes")
            found = False
            for i in range(len(ptr.parent.definitions)):
                if ptr.parent.definitions[i] == ptr:
                    ptr.parent.definitions[i] = orig
                    found = True
                    break
            if not found:
                raise Exception(f"could not find ptr for {ptr.path}")


    def decode_Format(self, parent, encoded):
        return freeconf.val.Format(encoded)

    # grpc wraps arrays with customer class that acts like an array. here we
    # drop that wackyness
    def decode_repeated_scalar(self, ary):
        return [x for x in ary]

    def decode_DataDefList(self, parent, encoded_list):
        to = []
        for encoded in encoded_list:
{{- $conditional := "if" }}
{{- $ddef := index .MessagesByName "DataDef" }}
{{- $fields := index $ddef.OneOfs "def_oneof" }}
{{- range $fields }}
            {{ $conditional }} encoded.HasField('{{.Name}}'):
                to.append(self.decode_{{.Type }}(parent, encoded.{{.Name}}))
    {{- $conditional = "elif" }}    
{{- end }}
            else:
                raise Exception(f'no recognized data definition types {type(encoded)}')

        return to        

{{ range .MetaDefs }}
{{- if .IsMetaDef }}
    def decode_{{.Name}}(self, parent, encoded):
        to = freeconf.meta.{{.Name}}()
        to.parent = parent
        {{- range .Fields }}
        {{- if .PyCustomDecoder }}
        to.{{.PyName}} = self.decode_{{.PyCustomDecoder}}(to, encoded.{{.Name}} )
        {{- else if .Repeated }}
        to.{{.PyName}} = self.decode_repeated_scalar(encoded.{{.Name}})
        {{- else }}        
        to.{{.PyName}} = encoded.{{.Name}}
        {{- end }}
        {{- end }}
        return to
{{ end }}
{{ end }}

    def decode(self, encoded_module):
        m = self.decode_Module(None, encoded_module)
        self.resolve_ptrs(m)
        return m


class MetaPointer:
    def __init__(self, parent, path):
        self.parent = parent
        self.path = path
        self.ident = path.split("/")[-1]
